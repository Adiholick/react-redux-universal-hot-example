# This file is a template, and might need editing before it works on your project.
# Official docker image.
image: docker:latest

services:
  - docker:dind

variables:
  # see https://gitlab.com/gitlab-org/gitlab-ce/issues/17861#note_12991518
  DOCKER_DRIVER: overlay

stages:
  - build
  - verify
  - deploy

variables:
  CONTAINER_DEV_IMAGE: $CI_REGISTRY_IMAGE:dev_$CI_BUILD_REF_NAME
  CONTAINER_DIST_IMAGE: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
  CONTAINER_LATEST_IMAGE: $CI_REGISTRY_IMAGE:latest
  # use this instead for verifying with the built image from exactly this branch
  # note: remember to add that branch to `only` (see comment on build-dev-image:)
  # note: make sure to update your develop branch on your repo regularly so that
  # the VERIFY_IMAGE is updated
  # CONTAINER_FOR_VERIFY_IMAGE: $CONTAINER_DEV_IMAGE
  CONTAINER_FOR_VERIFY_IMAGE: $CI_REGISTRY_IMAGE:dev_master
  HEROKU_USER_NAME: _
  HEROKU_REGISTRY: registry.heroku.com
  HEROKU_IMAGE_PROCESS_TYPE: web
  HEROKU_STAGING_IMAGE: $HEROKU_REGISTRY/$HEROKU_STAGING_APP_NAME/$HEROKU_IMAGE_PROCESS_TYPE
  HEROKU_PROD_IMAGE: $HEROKU_REGISTRY/$HEROKU_PROD_APP_NAME/$HEROKU_IMAGE_PROCESS_TYPE

before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
  - CI_BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

build-dev-image:
  stage: build
  script:
    - docker build -f Dockerfile-dev --build-arg CI_BUILD_ID=$CI_BUILD_ID --build-arg CI_BUILD_REF=$CI_BUILD_REF --build-arg CI_BUILD_REF_NAME=$CI_BUILD_REF_NAME --build-arg CI_BUILD_TIME=$CI_BUILD_TIME --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME --pull -t $CONTAINER_DEV_IMAGE .
    - docker push $CONTAINER_DEV_IMAGE
  only:
    # to reduce the building time, if we need to build the image on a specific branch, add that branch here
    - develop
    - master

build-dist-image:
  stage: build
  script:
    - docker build --build-arg CI_BUILD_ID=$CI_BUILD_ID --build-arg CI_BUILD_REF=$CI_BUILD_REF --build-arg CI_BUILD_REF_NAME=$CI_BUILD_REF_NAME --build-arg CI_BUILD_TIME=$CI_BUILD_TIME --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME --pull -t $CONTAINER_DIST_IMAGE .
    - docker push $CONTAINER_DIST_IMAGE
  only:
    # to reduce the building time, if we need to build the image on a specific branch, add that branch here
    - develop
    - master

lint-test:
  stage: verify
  script:
    - docker run -v $(pwd):/opt/app -v /opt/app/node_modules $CONTAINER_FOR_VERIFY_IMAGE npm run lint
    - docker run -v $(pwd):/opt/app -v /opt/app/node_modules -e CI='gitlab' $CONTAINER_FOR_VERIFY_IMAGE npm run test
    # FIXME(hoatle): why all tests not run?
    - docker run -v $(pwd):/opt/app -v /opt/app/node_modules $CONTAINER_FOR_VERIFY_IMAGE npm run test-node

release-latest-image: # alias <name>:latest to <name>:master
  stage: deploy
  script:
    - docker pull $CONTAINER_DIST_IMAGE
    - docker tag $CONTAINER_DIST_IMAGE $CONTAINER_LATEST_IMAGE
    - docker push $CONTAINER_LATEST_IMAGE
  only:
    - master

deploy-staging-heroku:
  stage: deploy
  before_script:
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker login --username=$HEROKU_USER_NAME --password=$HEROKU_STAGING_API_KEY $HEROKU_REGISTRY
  script:
    - docker pull $CONTAINER_DIST_IMAGE
    - docker tag $CONTAINER_DIST_IMAGE $HEROKU_STAGING_IMAGE
    - docker push $HEROKU_STAGING_IMAGE
  environment: staging
  only:
    - develop
  allow_failure: true # for downstream failure

deploy-prod-heroku:
  stage: deploy
  before_script:
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker login --username=$HEROKU_USER_NAME --password=$HEROKU_PROD_API_KEY $HEROKU_REGISTRY
  script:
    - docker pull $CONTAINER_DIST_IMAGE
    - docker tag $CONTAINER_DIST_IMAGE $HEROKU_PROD_IMAGE
    - docker push $HEROKU_PROD_IMAGE
  environment: prod
  only:
    - master
  allow_failure: true # for downstream failure
